package jenkins.plugins.logstash.persistence;

import static org.mockito.Mockito.*;

import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

import net.sf.json.JSONObject;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.assertEquals;

import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import com.cloudbees.syslog.Facility;
import com.cloudbees.syslog.MessageFormat;
import com.cloudbees.syslog.Severity;
import com.cloudbees.syslog.sender.UdpSyslogMessageSender;


@RunWith(MockitoJUnitRunner.class)
public class SyslogDaoTest {
  SyslogDao dao;
  String data = "{ 'junit': 'SyslogDaoTest' }";
  String host = "localhost";
  String appname = "jenkins:";
  int port = 514;
  UdpSyslogMessageSender testSyslogSend = new UdpSyslogMessageSender();
  @Mock UdpSyslogMessageSender mockUdpSyslogMessageSender;
 	  
  @Before
  public void before() throws Exception {    
    dao = createDao(host, port, null, null, null);
    dao.push(data); 
  }

  // Test the Message format.
  @Test
  public void ceeMessageFormat() throws Exception {
    verify(mockUdpSyslogMessageSender, times(1)).sendMessage(" @cee: " + data);
  }

  // Test the MessageSender configuration. 
  @Test
  public void syslogConfig() throws Exception {
    verify(mockUdpSyslogMessageSender, times(1)).setDefaultMessageHostname(host);
    verify(mockUdpSyslogMessageSender, times(1)).setDefaultAppName(appname);
    verify(mockUdpSyslogMessageSender, times(1)).setSyslogServerHostname(host);
    verify(mockUdpSyslogMessageSender, times(1)).setSyslogServerPort(port);
    verify(mockUdpSyslogMessageSender, times(1)).setDefaultFacility(Facility.USER);
    verify(mockUdpSyslogMessageSender, times(1)).setDefaultSeverity(Severity.INFORMATIONAL);
    verify(mockUdpSyslogMessageSender, times(1)).setMessageFormat(MessageFormat.RFC_5424);
  }

  // Send a real Syslog message to Logstash.
  @Test
  public void syslogSend() throws Exception {

    String logfile = "src/test/resources/logs/syslog-test.log";
    
    // Clean up the the logstash log file
    PrintWriter writer = new PrintWriter(logfile);
    writer.close(); 
    
    // Send the syslog message
    testSyslogSend.setDefaultMessageHostname(host);
    testSyslogSend.setDefaultAppName(appname);
    testSyslogSend.setSyslogServerHostname(host);
    testSyslogSend.setSyslogServerPort(port);
    testSyslogSend.setDefaultFacility(Facility.USER);
    testSyslogSend.setDefaultSeverity(Severity.INFORMATIONAL);
    testSyslogSend.setMessageFormat(MessageFormat.RFC_3164);
    testSyslogSend.sendMessage(" @cee: " + data);
    
    // Give 2 seconds for logstash to process the message
    Thread.sleep(2000);
    
    // Check the logfile generated by logstash
    String logcontent = new String(Files.readAllBytes(Paths.get(logfile)));
    JSONObject logjson = JSONObject.fromObject(logcontent);
    String logmessage = logjson.get("message").toString();
    assertEquals(" @cee: " + data, logmessage);  
    
  }
  
  SyslogDao createDao(String host, int port, String key, String username, String password) {
    return new SyslogDao(mockUdpSyslogMessageSender, host, port, key, username, password);
  }
}
